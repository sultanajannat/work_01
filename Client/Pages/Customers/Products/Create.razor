@page "/products/Create"
@using work_01.Shared.Models
@using work_01.Shared.DTO

@inject HttpClient http
@inject IToastService toastservice
@inject NavigationManager navigationManager

<h3>Add new roduct here</h3>

<div class="row">
	<div class="col-12">
		<EditForm Model="@product" OnValidSubmit="SaveProduct">
			<h3></h3>
			<DataAnnotationsValidator/>
			<div class="row mb-1">
				<label class="col-form-label col-2 text-end" for="@product.ProductName">Product List</label>
				<div class="col-6">
					<InputText @bind-Value="product.ProductName" class="form-control"/>
				</div>
				<div class="col-4">
					<ValidationMessage For="@(()=>product.ProductName)" class="text-danger"/>
				</div>
			</div>


			<div class="row mb-1">
				<label class="col-form-label col-2 text-end" for="@product.Price">Price</label>
				<div class="col-6">
					<InputNumber @bind-Value="product.Price" class="form-control" />
				</div>
				<div class="col-4">
					<ValidationMessage For="@(()=>product.Price)" class="text-danger" />
				</div>
			</div>

			<div class="row mb-1">
				<label class="col-form-label col-2 text-end" for="@product.Picture">Picture</label>
				<div class="col-6">
					<InputFile OnChange="@OnInputFileChange"  class="form-control" />
					<input type="hidden" @bind="@product.ProductID"/>
				</div>
				<div class="col-4">
					<ValidationMessage For="@(()=>product.Picture)" class="text-danger" />
				</div>
			</div>


			<div class="row mb-1">
				<label class="col-form-label col-2 text-end" for="@product.IsAvailable">Available</label>
				<div class="col-6">
					<InputCheckbox @bind-Value="product.IsAvailable" class="form-check-input" />
				</div>
				<div class="col-4">
					<ValidationMessage For="@(()=>product.IsAvailable)" class="text-danger" />
				</div>
			</div>


			<div class="row mb-1">
			
				<div class="col-10 offset-2">
				<button type="submit" class="btn btn-primary">save</button>
				</div>
				
			</div>
		</EditForm>
	</div>
	<div>

	</div>
</div>
@code {
	private ProductDTO product = new();
	IBrowserFile? selectedFile;
	private void OnInputFileChange(InputFileChangeEventArgs e)
	{
		selectedFile = e.File;
		product.Picture = e.File.Name;
	}
	private async Task SaveProduct()
	{
		if(product is not null)
		{
			var saveImage = await UploadImageAsync();
			product.Picture = saveImage.StoredFileName;
			var response = await http.PostAsJsonAsync("api/ Products", product);
			if (response.IsSuccessStatusCode)
			{
				toastservice.ShowSuccess("data saved successfully");
				product = new();

			}
			else
			{
				toastservice.ShowSuccess("data failed to save");
			}
		}

	}
	private async Task<ImageUploadResponse> UploadImageAsync()
	{
		using (var ms = new MemoryStream())
		{
			if(selectedFile is not null)
			{
				var content = new MultipartFormDataContent();
				var fileContent = new StreamContent(selectedFile.OpenReadStream(long.MaxValue));
				fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedFile.ContentType);
				content.Add(content: fileContent, name: "\file\"", fileName: selectedFile.Name);
				var response = await http.PostAsync("api/ Products/Upload", content);
				var r = await response.Content.ReadFromJsonAsync<ImageUploadResponse>();
				return r == null ? new ImageUploadResponse() : r;
			}
			else
			{
				return new ImageUploadResponse();
			}
		}
	}


	
}
